diff '--color=auto' -p -X chromium-loongarch64/exclude -N -u -r a/build/nocompile.gni b/build/nocompile.gni
--- a/build/nocompile.gni	2024-01-10 08:13:24.110605000 +0800
+++ b/build/nocompile.gni	2024-01-14 15:00:35.475182521 +0800
@@ -115,10 +115,10 @@ if (enable_nocompile_tests_new) {
         rebased_obj_path,
         rebased_depfile_path,
         "--",
-        "{{cflags}}",
-        "{{cflags_cc}}",
-        "{{defines}}",
-        "{{include_dirs}}",
+        # "{{cflags}}",
+        # "{{cflags_cc}}",
+        # "{{defines}}",
+        # "{{include_dirs}}",
 
         # No need to generate an object file for nocompile tests.
         "-Xclang",
diff '--color=auto' -p -X chromium-loongarch64/exclude -N -u -r a/third_party/blink/renderer/platform/BUILD.gn b/third_party/blink/renderer/platform/BUILD.gn
--- a/third_party/blink/renderer/platform/BUILD.gn	2024-01-10 08:14:03.274067400 +0800
+++ b/third_party/blink/renderer/platform/BUILD.gn	2024-01-16 13:43:17.191779741 +0800
@@ -881,7 +881,7 @@ component("platform") {
     "graphics/compositor_mutator_client.cc",
     "graphics/compositor_mutator_client.h",
     "graphics/cpu/arm/webgl_image_conversion_neon.h",
-    "graphics/cpu/loongarch64/webgl_image_conversion_lsx.h",
+    # "graphics/cpu/loongarch64/webgl_image_conversion_lsx.h",
     "graphics/cpu/mips/webgl_image_conversion_msa.h",
     "graphics/cpu/x86/webgl_image_conversion_sse.h",
     "graphics/crossfade_generated_image.cc",
@@ -1595,7 +1595,8 @@ component("platform") {
     }
   }
 
-  if (current_cpu == "loong64") {
+  # clang 17 does not support lsx
+  if (current_cpu == "loong64" && !is_clang) {
     cflags = [
       "-mlsx",
       "-flax-vector-conversions",
diff '--color=auto' -p -X chromium-loongarch64/exclude -N -u -r a/third_party/blink/renderer/platform/graphics/gpu/webgl_image_conversion.cc b/third_party/blink/renderer/platform/graphics/gpu/webgl_image_conversion.cc
--- a/third_party/blink/renderer/platform/graphics/gpu/webgl_image_conversion.cc	2024-01-10 08:14:03.374076400 +0800
+++ b/third_party/blink/renderer/platform/graphics/gpu/webgl_image_conversion.cc	2024-01-15 18:34:31.518083495 +0800
@@ -13,7 +13,7 @@
 #include "build/build_config.h"
 #include "third_party/blink/public/platform/platform.h"
 #include "third_party/blink/renderer/platform/graphics/cpu/arm/webgl_image_conversion_neon.h"
-#include "third_party/blink/renderer/platform/graphics/cpu/loongarch64/webgl_image_conversion_lsx.h"
+// #include "third_party/blink/renderer/platform/graphics/cpu/loongarch64/webgl_image_conversion_lsx.h"
 #include "third_party/blink/renderer/platform/graphics/cpu/mips/webgl_image_conversion_msa.h"
 #include "third_party/blink/renderer/platform/graphics/cpu/x86/webgl_image_conversion_sse.h"
 #include "third_party/blink/renderer/platform/graphics/image_observer.h"
@@ -904,10 +904,6 @@ void Unpack<WebGLImageConversion::kDataF
   simd::unpackOneRowOfBGRA8LittleToRGBA8MSA(source32, destination32,
                                             pixels_per_row);
 #endif
-#if defined(ARCH_CPU_LOONGARCH_FAMILY)
-  simd::UnpackOneRowOfBGRA8LittleToRGBA8(source32, destination32,
-                                         pixels_per_row);
-#endif
   for (unsigned i = 0; i < pixels_per_row; ++i) {
     uint32_t bgra = source32[i];
 #if defined(ARCH_CPU_BIG_ENDIAN)
@@ -938,10 +934,6 @@ void Unpack<WebGLImageConversion::kDataF
 #if defined(HAVE_MIPS_MSA_INTRINSICS)
   simd::unpackOneRowOfRGBA5551ToRGBA8MSA(source, destination, pixels_per_row);
 #endif
-#if defined(ARCH_CPU_LOONGARCH_FAMILY)
-  simd::UnpackOneRowOfRGBA5551LittleToRGBA8(source, destination,
-                                            pixels_per_row);
-#endif
 
   for (unsigned i = 0; i < pixels_per_row; ++i) {
     uint16_t packed_value = source[0];
@@ -972,10 +964,6 @@ void Unpack<WebGLImageConversion::kDataF
 #if defined(HAVE_MIPS_MSA_INTRINSICS)
   simd::unpackOneRowOfRGBA4444ToRGBA8MSA(source, destination, pixels_per_row);
 #endif
-#if defined(ARCH_CPU_LOONGARCH_FAMILY)
-  simd::UnpackOneRowOfRGBA4444LittleToRGBA8(source, destination,
-                                            pixels_per_row);
-#endif
   for (unsigned i = 0; i < pixels_per_row; ++i) {
     uint16_t packed_value = source[0];
     uint8_t r = packed_value >> 12;
@@ -1290,9 +1278,6 @@ void Pack<WebGLImageConversion::kDataFor
 #if defined(HAVE_MIPS_MSA_INTRINSICS)
   simd::packOneRowOfRGBA8LittleToR8MSA(source, destination, pixels_per_row);
 #endif
-#if defined(ARCH_CPU_LOONGARCH_FAMILY)
-  simd::PackOneRowOfRGBA8LittleToR8(source, destination, pixels_per_row);
-#endif
   for (unsigned i = 0; i < pixels_per_row; ++i) {
     float scale_factor = source[3] ? 255.0f / source[3] : 1.0f;
     uint8_t source_r =
@@ -1395,9 +1380,6 @@ void Pack<WebGLImageConversion::kDataFor
 #if defined(HAVE_MIPS_MSA_INTRINSICS)
   simd::packOneRowOfRGBA8LittleToRA8MSA(source, destination, pixels_per_row);
 #endif
-#if defined(ARCH_CPU_LOONGARCH_FAMILY)
-  simd::PackOneRowOfRGBA8LittleToRA8(source, destination, pixels_per_row);
-#endif
   for (unsigned i = 0; i < pixels_per_row; ++i) {
     float scale_factor = source[3] ? 255.0f / source[3] : 1.0f;
     uint8_t source_r =
@@ -1591,9 +1573,6 @@ void Pack<WebGLImageConversion::kDataFor
 #if defined(HAVE_MIPS_MSA_INTRINSICS)
   simd::packOneRowOfRGBA8LittleToRGBA8MSA(source, destination, pixels_per_row);
 #endif
-#if defined(ARCH_CPU_LOONGARCH_FAMILY)
-  simd::PackOneRowOfRGBA8LittleToRGBA8(source, destination, pixels_per_row);
-#endif
   for (unsigned i = 0; i < pixels_per_row; ++i) {
     float scale_factor = source[3] ? 255.0f / source[3] : 1.0f;
     uint8_t source_r =
diff '--color=auto' -p -X chromium-loongarch64/exclude -N -u -r a/third_party/libvpx/BUILD.gn b/third_party/libvpx/BUILD.gn
--- a/third_party/libvpx/BUILD.gn	2024-01-10 08:14:24.003900300 +0800
+++ b/third_party/libvpx/BUILD.gn	2024-01-16 13:36:20.203591291 +0800
@@ -515,7 +515,8 @@ static_library("libvpx") {
   if (current_cpu == "arm" && arm_assembly_sources != []) {
     deps += [ ":libvpx_assembly_arm" ]
   }
-  if (current_cpu == "loong64") {
+  # clang 17 does not support lsx
+  if (current_cpu == "loong64" && !is_clang) {
     deps += [ ":libvpx_loongarch_lsx" ]
   }
 
