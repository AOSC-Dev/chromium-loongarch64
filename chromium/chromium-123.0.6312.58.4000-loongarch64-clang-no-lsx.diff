diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/blink/renderer/platform/BUILD.gn b/third_party/blink/renderer/platform/BUILD.gn
--- a/third_party/blink/renderer/platform/BUILD.gn	2000-01-01 00:00:00.000000000 +0800
+++ b/third_party/blink/renderer/platform/BUILD.gn	2000-01-01 00:00:00.000000000 +0800
@@ -879,7 +879,7 @@ component("platform") {
     "graphics/compositor_mutator_client.cc",
     "graphics/compositor_mutator_client.h",
     "graphics/cpu/arm/webgl_image_conversion_neon.h",
-    "graphics/cpu/loongarch64/webgl_image_conversion_lsx.h",
+    # "graphics/cpu/loongarch64/webgl_image_conversion_lsx.h",
     "graphics/cpu/mips/webgl_image_conversion_msa.h",
     "graphics/cpu/x86/webgl_image_conversion_sse.h",
     "graphics/crossfade_generated_image.cc",
@@ -1594,7 +1594,8 @@ component("platform") {
     }
   }
 
-  if (current_cpu == "loong64") {
+  # clang 17 does not support lsx
+  if (current_cpu == "loong64" && !is_clang) {
     cflags = [
       "-mlsx",
       "-flax-vector-conversions=all",
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/blink/renderer/platform/graphics/gpu/webgl_image_conversion.cc b/third_party/blink/renderer/platform/graphics/gpu/webgl_image_conversion.cc
--- a/third_party/blink/renderer/platform/graphics/gpu/webgl_image_conversion.cc	2000-01-01 00:00:00.000000000 +0800
+++ b/third_party/blink/renderer/platform/graphics/gpu/webgl_image_conversion.cc	2000-01-01 00:00:00.000000000 +0800
@@ -13,7 +13,7 @@
 #include "build/build_config.h"
 #include "third_party/blink/public/platform/platform.h"
 #include "third_party/blink/renderer/platform/graphics/cpu/arm/webgl_image_conversion_neon.h"
-#include "third_party/blink/renderer/platform/graphics/cpu/loongarch64/webgl_image_conversion_lsx.h"
+// #include "third_party/blink/renderer/platform/graphics/cpu/loongarch64/webgl_image_conversion_lsx.h"
 #include "third_party/blink/renderer/platform/graphics/cpu/mips/webgl_image_conversion_msa.h"
 #include "third_party/blink/renderer/platform/graphics/cpu/x86/webgl_image_conversion_sse.h"
 #include "third_party/blink/renderer/platform/graphics/image_observer.h"
@@ -904,10 +904,6 @@ void Unpack<WebGLImageConversion::kDataF
   simd::unpackOneRowOfBGRA8LittleToRGBA8MSA(source32, destination32,
                                             pixels_per_row);
 #endif
-#if defined(ARCH_CPU_LOONGARCH_FAMILY)
-  simd::UnpackOneRowOfBGRA8LittleToRGBA8(source32, destination32,
-                                         pixels_per_row);
-#endif
   for (unsigned i = 0; i < pixels_per_row; ++i) {
     uint32_t bgra = source32[i];
 #if defined(ARCH_CPU_BIG_ENDIAN)
@@ -938,10 +934,6 @@ void Unpack<WebGLImageConversion::kDataF
 #if defined(HAVE_MIPS_MSA_INTRINSICS)
   simd::unpackOneRowOfRGBA5551ToRGBA8MSA(source, destination, pixels_per_row);
 #endif
-#if defined(ARCH_CPU_LOONGARCH_FAMILY)
-  simd::UnpackOneRowOfRGBA5551LittleToRGBA8(source, destination,
-                                            pixels_per_row);
-#endif
 
   for (unsigned i = 0; i < pixels_per_row; ++i) {
     uint16_t packed_value = source[0];
@@ -972,10 +964,6 @@ void Unpack<WebGLImageConversion::kDataF
 #if defined(HAVE_MIPS_MSA_INTRINSICS)
   simd::unpackOneRowOfRGBA4444ToRGBA8MSA(source, destination, pixels_per_row);
 #endif
-#if defined(ARCH_CPU_LOONGARCH_FAMILY)
-  simd::UnpackOneRowOfRGBA4444LittleToRGBA8(source, destination,
-                                            pixels_per_row);
-#endif
   for (unsigned i = 0; i < pixels_per_row; ++i) {
     uint16_t packed_value = source[0];
     uint8_t r = packed_value >> 12;
@@ -1290,9 +1278,6 @@ void Pack<WebGLImageConversion::kDataFor
 #if defined(HAVE_MIPS_MSA_INTRINSICS)
   simd::packOneRowOfRGBA8LittleToR8MSA(source, destination, pixels_per_row);
 #endif
-#if defined(ARCH_CPU_LOONGARCH_FAMILY)
-  simd::PackOneRowOfRGBA8LittleToR8(source, destination, pixels_per_row);
-#endif
   for (unsigned i = 0; i < pixels_per_row; ++i) {
     float scale_factor = source[3] ? 255.0f / source[3] : 1.0f;
     uint8_t source_r =
@@ -1395,9 +1380,6 @@ void Pack<WebGLImageConversion::kDataFor
 #if defined(HAVE_MIPS_MSA_INTRINSICS)
   simd::packOneRowOfRGBA8LittleToRA8MSA(source, destination, pixels_per_row);
 #endif
-#if defined(ARCH_CPU_LOONGARCH_FAMILY)
-  simd::PackOneRowOfRGBA8LittleToRA8(source, destination, pixels_per_row);
-#endif
   for (unsigned i = 0; i < pixels_per_row; ++i) {
     float scale_factor = source[3] ? 255.0f / source[3] : 1.0f;
     uint8_t source_r =
@@ -1591,9 +1573,6 @@ void Pack<WebGLImageConversion::kDataFor
 #if defined(HAVE_MIPS_MSA_INTRINSICS)
   simd::packOneRowOfRGBA8LittleToRGBA8MSA(source, destination, pixels_per_row);
 #endif
-#if defined(ARCH_CPU_LOONGARCH_FAMILY)
-  simd::PackOneRowOfRGBA8LittleToRGBA8(source, destination, pixels_per_row);
-#endif
   for (unsigned i = 0; i < pixels_per_row; ++i) {
     float scale_factor = source[3] ? 255.0f / source[3] : 1.0f;
     uint8_t source_r =
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/libvpx/BUILD.gn b/third_party/libvpx/BUILD.gn
--- a/third_party/libvpx/BUILD.gn	2000-01-01 00:00:00.000000000 +0800
+++ b/third_party/libvpx/BUILD.gn	2000-01-01 00:00:00.000000000 +0800
@@ -542,7 +542,8 @@ static_library("libvpx") {
   if (current_cpu == "arm" && arm_assembly_sources != []) {
     deps += [ ":libvpx_assembly_arm" ]
   }
-  if (current_cpu == "loong64") {
+  # clang 17 does not support lsx
+  if (current_cpu == "loong64" && !is_clang) {
     deps += [ ":libvpx_loongarch_lsx" ]
   }
 
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/libvpx/source/config/linux/loongarch/vp8_rtcd.h b/third_party/libvpx/source/config/linux/loongarch/vp8_rtcd.h
--- a/third_party/libvpx/source/config/linux/loongarch/vp8_rtcd.h	2000-01-01 00:00:00.000000000 +0800
+++ b/third_party/libvpx/source/config/linux/loongarch/vp8_rtcd.h	2000-01-01 00:00:00.000000000 +0800
@@ -444,53 +444,21 @@ static void setup_rtcd_internal(void) {
 
   (void)flags;
   vp8_block_error = vp8_block_error_c;
-  if (flags & HAS_LSX)
-    vp8_block_error = vp8_block_error_lsx;
   vp8_dc_only_idct_add = vp8_dc_only_idct_add_c;
-  if (flags & HAS_LSX)
-    vp8_dc_only_idct_add = vp8_dc_only_idct_add_lsx;
   vp8_dequant_idct_add_uv_block = vp8_dequant_idct_add_uv_block_c;
-  if (flags & HAS_LSX)
-    vp8_dequant_idct_add_uv_block = vp8_dequant_idct_add_uv_block_lsx;
   vp8_dequant_idct_add_y_block = vp8_dequant_idct_add_y_block_c;
-  if (flags & HAS_LSX)
-    vp8_dequant_idct_add_y_block = vp8_dequant_idct_add_y_block_lsx;
   vp8_diamond_search_sad = vp8_diamond_search_sad_c;
-  if (flags & HAS_LSX)
-    vp8_diamond_search_sad = vp8_diamond_search_sadx4;
   vp8_loop_filter_bh = vp8_loop_filter_bh_c;
-  if (flags & HAS_LSX)
-    vp8_loop_filter_bh = vp8_loop_filter_bh_lsx;
   vp8_loop_filter_bv = vp8_loop_filter_bv_c;
-  if (flags & HAS_LSX)
-    vp8_loop_filter_bv = vp8_loop_filter_bv_lsx;
   vp8_loop_filter_mbh = vp8_loop_filter_mbh_c;
-  if (flags & HAS_LSX)
-    vp8_loop_filter_mbh = vp8_loop_filter_mbh_lsx;
   vp8_loop_filter_mbv = vp8_loop_filter_mbv_c;
-  if (flags & HAS_LSX)
-    vp8_loop_filter_mbv = vp8_loop_filter_mbv_lsx;
   vp8_mbblock_error = vp8_mbblock_error_c;
-  if (flags & HAS_LSX)
-    vp8_mbblock_error = vp8_mbblock_error_lsx;
   vp8_regular_quantize_b = vp8_regular_quantize_b_c;
-  if (flags & HAS_LSX)
-    vp8_regular_quantize_b = vp8_regular_quantize_b_lsx;
   vp8_short_fdct4x4 = vp8_short_fdct4x4_c;
-  if (flags & HAS_LSX)
-    vp8_short_fdct4x4 = vp8_short_fdct4x4_lsx;
   vp8_short_fdct8x4 = vp8_short_fdct8x4_c;
-  if (flags & HAS_LSX)
-    vp8_short_fdct8x4 = vp8_short_fdct8x4_lsx;
   vp8_sixtap_predict16x16 = vp8_sixtap_predict16x16_c;
-  if (flags & HAS_LSX)
-    vp8_sixtap_predict16x16 = vp8_sixtap_predict16x16_lsx;
   vp8_sixtap_predict4x4 = vp8_sixtap_predict4x4_c;
-  if (flags & HAS_LSX)
-    vp8_sixtap_predict4x4 = vp8_sixtap_predict4x4_lsx;
   vp8_sixtap_predict8x8 = vp8_sixtap_predict8x8_c;
-  if (flags & HAS_LSX)
-    vp8_sixtap_predict8x8 = vp8_sixtap_predict8x8_lsx;
 }
 #endif
 
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/libvpx/source/config/linux/loongarch/vpx_dsp_rtcd.h b/third_party/libvpx/source/config/linux/loongarch/vpx_dsp_rtcd.h
--- a/third_party/libvpx/source/config/linux/loongarch/vpx_dsp_rtcd.h	2000-01-01 00:00:00.000000000 +0800
+++ b/third_party/libvpx/source/config/linux/loongarch/vpx_dsp_rtcd.h	2000-01-01 00:00:00.000000000 +0800
@@ -2280,176 +2280,62 @@ static void setup_rtcd_internal(void) {
 
   (void)flags;
   vpx_comp_avg_pred = vpx_comp_avg_pred_c;
-  if (flags & HAS_LSX)
-    vpx_comp_avg_pred = vpx_comp_avg_pred_lsx;
   vpx_convolve8 = vpx_convolve8_c;
-  if (flags & HAS_LSX)
-    vpx_convolve8 = vpx_convolve8_lsx;
   vpx_convolve8_avg = vpx_convolve8_avg_c;
-  if (flags & HAS_LSX)
-    vpx_convolve8_avg = vpx_convolve8_avg_lsx;
   vpx_convolve8_avg_horiz = vpx_convolve8_avg_horiz_c;
-  if (flags & HAS_LSX)
-    vpx_convolve8_avg_horiz = vpx_convolve8_avg_horiz_lsx;
   vpx_convolve8_avg_vert = vpx_convolve8_avg_vert_c;
-  if (flags & HAS_LSX)
-    vpx_convolve8_avg_vert = vpx_convolve8_avg_vert_lsx;
   vpx_convolve8_horiz = vpx_convolve8_horiz_c;
-  if (flags & HAS_LSX)
-    vpx_convolve8_horiz = vpx_convolve8_horiz_lsx;
   vpx_convolve8_vert = vpx_convolve8_vert_c;
-  if (flags & HAS_LSX)
-    vpx_convolve8_vert = vpx_convolve8_vert_lsx;
   vpx_convolve_avg = vpx_convolve_avg_c;
-  if (flags & HAS_LSX)
-    vpx_convolve_avg = vpx_convolve_avg_lsx;
   vpx_convolve_copy = vpx_convolve_copy_c;
-  if (flags & HAS_LSX)
-    vpx_convolve_copy = vpx_convolve_copy_lsx;
   vpx_dc_predictor_16x16 = vpx_dc_predictor_16x16_c;
-  if (flags & HAS_LSX)
-    vpx_dc_predictor_16x16 = vpx_dc_predictor_16x16_lsx;
   vpx_dc_predictor_8x8 = vpx_dc_predictor_8x8_c;
-  if (flags & HAS_LSX)
-    vpx_dc_predictor_8x8 = vpx_dc_predictor_8x8_lsx;
   vpx_fdct16x16 = vpx_fdct16x16_c;
-  if (flags & HAS_LSX)
-    vpx_fdct16x16 = vpx_fdct16x16_lsx;
   vpx_fdct32x32 = vpx_fdct32x32_c;
-  if (flags & HAS_LSX)
-    vpx_fdct32x32 = vpx_fdct32x32_lsx;
   vpx_fdct32x32_rd = vpx_fdct32x32_rd_c;
-  if (flags & HAS_LSX)
-    vpx_fdct32x32_rd = vpx_fdct32x32_rd_lsx;
   vpx_fdct4x4 = vpx_fdct4x4_c;
-  if (flags & HAS_LSX)
-    vpx_fdct4x4 = vpx_fdct4x4_lsx;
   vpx_fdct8x8 = vpx_fdct8x8_c;
-  if (flags & HAS_LSX)
-    vpx_fdct8x8 = vpx_fdct8x8_lsx;
   vpx_get16x16var = vpx_get16x16var_c;
-  if (flags & HAS_LSX)
-    vpx_get16x16var = vpx_get16x16var_lsx;
   vpx_hadamard_16x16 = vpx_hadamard_16x16_c;
-  if (flags & HAS_LSX)
-    vpx_hadamard_16x16 = vpx_hadamard_16x16_lsx;
   vpx_hadamard_8x8 = vpx_hadamard_8x8_c;
-  if (flags & HAS_LSX)
-    vpx_hadamard_8x8 = vpx_hadamard_8x8_lsx;
   vpx_idct32x32_1024_add = vpx_idct32x32_1024_add_c;
-  if (flags & HAS_LSX)
-    vpx_idct32x32_1024_add = vpx_idct32x32_1024_add_lsx;
   vpx_idct32x32_135_add = vpx_idct32x32_135_add_c;
-  if (flags & HAS_LSX)
-    vpx_idct32x32_135_add = vpx_idct32x32_1024_add_lsx;
   vpx_idct32x32_1_add = vpx_idct32x32_1_add_c;
-  if (flags & HAS_LSX)
-    vpx_idct32x32_1_add = vpx_idct32x32_1_add_lsx;
   vpx_idct32x32_34_add = vpx_idct32x32_34_add_c;
-  if (flags & HAS_LSX)
-    vpx_idct32x32_34_add = vpx_idct32x32_34_add_lsx;
   vpx_lpf_horizontal_16_dual = vpx_lpf_horizontal_16_dual_c;
-  if (flags & HAS_LSX)
-    vpx_lpf_horizontal_16_dual = vpx_lpf_horizontal_16_dual_lsx;
   vpx_lpf_horizontal_4 = vpx_lpf_horizontal_4_c;
-  if (flags & HAS_LSX)
-    vpx_lpf_horizontal_4 = vpx_lpf_horizontal_4_lsx;
   vpx_lpf_horizontal_4_dual = vpx_lpf_horizontal_4_dual_c;
-  if (flags & HAS_LSX)
-    vpx_lpf_horizontal_4_dual = vpx_lpf_horizontal_4_dual_lsx;
   vpx_lpf_horizontal_8 = vpx_lpf_horizontal_8_c;
-  if (flags & HAS_LSX)
-    vpx_lpf_horizontal_8 = vpx_lpf_horizontal_8_lsx;
   vpx_lpf_horizontal_8_dual = vpx_lpf_horizontal_8_dual_c;
-  if (flags & HAS_LSX)
-    vpx_lpf_horizontal_8_dual = vpx_lpf_horizontal_8_dual_lsx;
   vpx_lpf_vertical_16_dual = vpx_lpf_vertical_16_dual_c;
-  if (flags & HAS_LSX)
-    vpx_lpf_vertical_16_dual = vpx_lpf_vertical_16_dual_lsx;
   vpx_lpf_vertical_4 = vpx_lpf_vertical_4_c;
-  if (flags & HAS_LSX)
-    vpx_lpf_vertical_4 = vpx_lpf_vertical_4_lsx;
   vpx_lpf_vertical_4_dual = vpx_lpf_vertical_4_dual_c;
-  if (flags & HAS_LSX)
-    vpx_lpf_vertical_4_dual = vpx_lpf_vertical_4_dual_lsx;
   vpx_lpf_vertical_8 = vpx_lpf_vertical_8_c;
-  if (flags & HAS_LSX)
-    vpx_lpf_vertical_8 = vpx_lpf_vertical_8_lsx;
   vpx_lpf_vertical_8_dual = vpx_lpf_vertical_8_dual_c;
-  if (flags & HAS_LSX)
-    vpx_lpf_vertical_8_dual = vpx_lpf_vertical_8_dual_lsx;
   vpx_mse16x16 = vpx_mse16x16_c;
-  if (flags & HAS_LSX)
-    vpx_mse16x16 = vpx_mse16x16_lsx;
   vpx_quantize_b = vpx_quantize_b_c;
-  if (flags & HAS_LSX)
-    vpx_quantize_b = vpx_quantize_b_lsx;
   vpx_quantize_b_32x32 = vpx_quantize_b_32x32_c;
-  if (flags & HAS_LSX)
-    vpx_quantize_b_32x32 = vpx_quantize_b_32x32_lsx;
   vpx_sad16x16 = vpx_sad16x16_c;
-  if (flags & HAS_LSX)
-    vpx_sad16x16 = vpx_sad16x16_lsx;
   vpx_sad16x16x4d = vpx_sad16x16x4d_c;
-  if (flags & HAS_LSX)
-    vpx_sad16x16x4d = vpx_sad16x16x4d_lsx;
   vpx_sad32x32 = vpx_sad32x32_c;
-  if (flags & HAS_LSX)
-    vpx_sad32x32 = vpx_sad32x32_lsx;
   vpx_sad32x32_avg = vpx_sad32x32_avg_c;
-  if (flags & HAS_LSX)
-    vpx_sad32x32_avg = vpx_sad32x32_avg_lsx;
   vpx_sad32x32x4d = vpx_sad32x32x4d_c;
-  if (flags & HAS_LSX)
-    vpx_sad32x32x4d = vpx_sad32x32x4d_lsx;
   vpx_sad32x64x4d = vpx_sad32x64x4d_c;
-  if (flags & HAS_LSX)
-    vpx_sad32x64x4d = vpx_sad32x64x4d_lsx;
   vpx_sad64x32x4d = vpx_sad64x32x4d_c;
-  if (flags & HAS_LSX)
-    vpx_sad64x32x4d = vpx_sad64x32x4d_lsx;
   vpx_sad64x64 = vpx_sad64x64_c;
-  if (flags & HAS_LSX)
-    vpx_sad64x64 = vpx_sad64x64_lsx;
   vpx_sad64x64_avg = vpx_sad64x64_avg_c;
-  if (flags & HAS_LSX)
-    vpx_sad64x64_avg = vpx_sad64x64_avg_lsx;
   vpx_sad64x64x4d = vpx_sad64x64x4d_c;
-  if (flags & HAS_LSX)
-    vpx_sad64x64x4d = vpx_sad64x64x4d_lsx;
   vpx_sad8x8 = vpx_sad8x8_c;
-  if (flags & HAS_LSX)
-    vpx_sad8x8 = vpx_sad8x8_lsx;
   vpx_sad8x8x4d = vpx_sad8x8x4d_c;
-  if (flags & HAS_LSX)
-    vpx_sad8x8x4d = vpx_sad8x8x4d_lsx;
   vpx_sub_pixel_avg_variance64x64 = vpx_sub_pixel_avg_variance64x64_c;
-  if (flags & HAS_LSX)
-    vpx_sub_pixel_avg_variance64x64 = vpx_sub_pixel_avg_variance64x64_lsx;
   vpx_sub_pixel_variance16x16 = vpx_sub_pixel_variance16x16_c;
-  if (flags & HAS_LSX)
-    vpx_sub_pixel_variance16x16 = vpx_sub_pixel_variance16x16_lsx;
   vpx_sub_pixel_variance32x32 = vpx_sub_pixel_variance32x32_c;
-  if (flags & HAS_LSX)
-    vpx_sub_pixel_variance32x32 = vpx_sub_pixel_variance32x32_lsx;
   vpx_sub_pixel_variance8x8 = vpx_sub_pixel_variance8x8_c;
-  if (flags & HAS_LSX)
-    vpx_sub_pixel_variance8x8 = vpx_sub_pixel_variance8x8_lsx;
   vpx_subtract_block = vpx_subtract_block_c;
-  if (flags & HAS_LSX)
-    vpx_subtract_block = vpx_subtract_block_lsx;
   vpx_variance16x16 = vpx_variance16x16_c;
-  if (flags & HAS_LSX)
-    vpx_variance16x16 = vpx_variance16x16_lsx;
   vpx_variance32x32 = vpx_variance32x32_c;
-  if (flags & HAS_LSX)
-    vpx_variance32x32 = vpx_variance32x32_lsx;
   vpx_variance64x64 = vpx_variance64x64_c;
-  if (flags & HAS_LSX)
-    vpx_variance64x64 = vpx_variance64x64_lsx;
   vpx_variance8x8 = vpx_variance8x8_c;
-  if (flags & HAS_LSX)
-    vpx_variance8x8 = vpx_variance8x8_lsx;
 }
 #endif
 
