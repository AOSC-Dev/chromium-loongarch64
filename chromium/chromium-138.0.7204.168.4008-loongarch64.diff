diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/base/system/sys_info.cc b/base/system/sys_info.cc
--- a/base/system/sys_info.cc	2000-01-01 00:00:00.000000000 +0800
+++ b/base/system/sys_info.cc	2000-01-01 00:00:00.000000000 +0800
@@ -256,6 +256,8 @@ std::string SysInfo::ProcessCPUArchitect
   return "ARM_64";
 #elif defined(ARCH_CPU_RISCV64)
   return "RISCV_64";
+#elif defined(ARCH_CPU_LOONGARCH64)
+  return "LOONGARCH_64";
 #else
   return std::string();
 #endif
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/build/config/loongarch64.gni b/build/config/loongarch64.gni
--- a/build/config/loongarch64.gni	2000-01-01 00:00:00.000000000 +0800
+++ b/build/config/loongarch64.gni	2000-01-01 00:00:00.000000000 +0800
@@ -7,7 +7,7 @@ import("//build/config/v8_target_cpu.gni
 if (current_cpu == "loong64") {
   declare_args() {
     # LOONGARCH64 SIMD Arch compilation flag.
-    loongarch64_use_lsx = false
+    loongarch64_use_lsx = true
     loongarch64_use_lasx = false
   }
 }
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/chrome/browser/extensions/api/runtime/chrome_runtime_api_delegate.cc b/chrome/browser/extensions/api/runtime/chrome_runtime_api_delegate.cc
--- a/chrome/browser/extensions/api/runtime/chrome_runtime_api_delegate.cc	2000-01-01 00:00:00.000000000 +0800
+++ b/chrome/browser/extensions/api/runtime/chrome_runtime_api_delegate.cc	2000-01-01 00:00:00.000000000 +0800
@@ -346,6 +346,8 @@ bool ChromeRuntimeAPIDelegate::GetPlatfo
     info->arch = extensions::api::runtime::PlatformArch::kMips;
   } else if (strcmp(arch, "mips64el") == 0) {
     info->arch = extensions::api::runtime::PlatformArch::kMips64;
+  } else if (strcmp(arch, "loongarch64") == 0) {
+    info->arch = extensions::api::runtime::PlatformArch::kLoongarch64;
   } else {
     NOTREACHED();
   }
@@ -361,6 +363,8 @@ bool ChromeRuntimeAPIDelegate::GetPlatfo
     info->nacl_arch = extensions::api::runtime::PlatformNaclArch::kMips;
   } else if (strcmp(nacl_arch, "mips64") == 0) {
     info->nacl_arch = extensions::api::runtime::PlatformNaclArch::kMips64;
+  } else if (strcmp(nacl_arch, "loongarch64") == 0) {
+    info->nacl_arch = extensions::api::runtime::PlatformNaclArch::kLoongarch64;
   } else {
     NOTREACHED();
   }
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/components/embedder_support/user_agent_utils.cc b/components/embedder_support/user_agent_utils.cc
--- a/components/embedder_support/user_agent_utils.cc	2000-01-01 00:00:00.000000000 +0800
+++ b/components/embedder_support/user_agent_utils.cc	2000-01-01 00:00:00.000000000 +0800
@@ -757,6 +757,8 @@ std::string GetCpuArchitecture() {
               cpu_info.substr(2, 2) == "86") ||
              base::StartsWith(cpu_info, "x86")) {
     return "x86";
+  } else if (base::StartsWith(cpu_info, "loong")) {
+    return "loongarch";
   }
 #elif BUILDFLAG(IS_FUCHSIA)
   std::string cpu_arch = base::SysInfo::ProcessCPUArchitecture();
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/components/metrics/debug/metrics_internals_utils.cc b/components/metrics/debug/metrics_internals_utils.cc
--- a/components/metrics/debug/metrics_internals_utils.cc	2000-01-01 00:00:00.000000000 +0800
+++ b/components/metrics/debug/metrics_internals_utils.cc	2000-01-01 00:00:00.000000000 +0800
@@ -72,6 +72,8 @@ std::string CpuArchitectureToString(
       return "arm32";
     case variations::Study::TRANSLATED_X86_64:
       return "translated_x86_64";
+    case variations::Study::LOONGARCH64:
+      return "loongarch64";
   }
   NOTREACHED();
 }
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/components/variations/proto/study.proto b/components/variations/proto/study.proto
--- a/components/variations/proto/study.proto	2000-01-01 00:00:00.000000000 +0800
+++ b/components/variations/proto/study.proto	2000-01-01 00:00:00.000000000 +0800
@@ -262,6 +262,8 @@ message Study {
     // A Mac-only value, indicating an x86-64 binary running on an arm64 host
     // via "Rosetta 2" binary translation.
     TRANSLATED_X86_64 = 4;
+
+    LOONGARCH64 = 5;
   }
 
   // Enum to pass as optional bool.
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/components/variations/service/variations_field_trial_creator_base.cc b/components/variations/service/variations_field_trial_creator_base.cc
--- a/components/variations/service/variations_field_trial_creator_base.cc	2000-01-01 00:00:00.000000000 +0800
+++ b/components/variations/service/variations_field_trial_creator_base.cc	2000-01-01 00:00:00.000000000 +0800
@@ -114,6 +114,9 @@ Study::CpuArchitecture GetCurrentCpuArch
   if (process_arch == "ARM") {
     return Study::ARM32;
   }
+  if (process_arch == "LOONGARCH_64") {
+    return Study::LOONGARCH64;
+  }
   if (process_arch == "x86") {
     return Study::X86_32;
   }
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/extensions/common/api/runtime.json b/extensions/common/api/runtime.json
--- a/extensions/common/api/runtime.json	2000-01-01 00:00:00.000000000 +0800
+++ b/extensions/common/api/runtime.json	2000-01-01 00:00:00.000000000 +0800
@@ -98,7 +98,8 @@
             {"name": "x86-32", "description": "Specifies the processer architecture as x86-32."},
             {"name": "x86-64", "description": "Specifies the processer architecture as x86-64."},
             {"name": "mips", "description": "Specifies the processer architecture as mips."},
-            {"name": "mips64", "description": "Specifies the processer architecture as mips64."}
+            {"name": "mips64", "description": "Specifies the processer architecture as mips64."},
+            {"name": "loongarch64", "description": "Specifies the processer architecture as loongarch64."}
          ],
         "description": "The machine's processor architecture."
       },
@@ -111,7 +112,8 @@
           {"name": "x86-32", "description": "Specifies the native client architecture as x86-32."},
           {"name": "x86-64", "description": "Specifies the native client architecture as x86-64."},
           {"name": "mips", "description": "Specifies the native client architecture as mips."},
-          {"name": "mips64", "description": "Specifies the native client architecture as mips64."}
+          {"name": "mips64", "description": "Specifies the native client architecture as mips64."},
+          {"name": "loongarch64", "description": "Specifies the native client architecture as loongarch64."}
         ]
       },
       {
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/blink/renderer/platform/graphics/cpu/loongarch64/webgl_image_conversion_lsx.h b/third_party/blink/renderer/platform/graphics/cpu/loongarch64/webgl_image_conversion_lsx.h
--- a/third_party/blink/renderer/platform/graphics/cpu/loongarch64/webgl_image_conversion_lsx.h	2000-01-01 00:00:00.000000000 +0800
+++ b/third_party/blink/renderer/platform/graphics/cpu/loongarch64/webgl_image_conversion_lsx.h	2000-01-01 00:00:00.000000000 +0800
@@ -91,19 +91,19 @@ ALWAYS_INLINE void PackOneRowOfRGBA8Litt
   v4f32 mask_falpha = __lsx_vffint_s_w(mask_lalpha);
   v16u8 ra_index = {0,19, 4,23, 8,27, 12,31};
   for (unsigned i = 0; i < pixels_per_row_trunc; i += 4) {
-    v16u8 bgra = *((__m128i*)(source));
+    __m128i bgra = *((__m128i*)(source));
     //if A !=0, A=0; else A=0xFF
-    v4f32 alpha_factor = __lsx_vseq_b(bgra, mask_zero);
+    __m128i alpha_factor = __lsx_vseq_b(bgra, mask_zero);
     //if A!=0, A=A; else A=0xFF
     alpha_factor = __lsx_vor_v(bgra, alpha_factor);
     alpha_factor = __lsx_vsrli_w(alpha_factor, 24);
-    alpha_factor = __lsx_vffint_s_w(alpha_factor);
-    alpha_factor = __lsx_vfdiv_s(mask_falpha, alpha_factor);
+    alpha_factor = (__m128i) __lsx_vffint_s_w(alpha_factor);
+    alpha_factor = (__m128i) __lsx_vfdiv_s((__m128) mask_falpha, (__m128) alpha_factor);
 
-    v16u8 component_r = __lsx_vand_v(bgra, mask_lalpha);
-    component_r = __lsx_vffint_s_w(component_r);
-    component_r = __lsx_vfmul_s(component_r, alpha_factor);
-    component_r = __lsx_vftintrz_w_s(component_r);
+    __m128i component_r = __lsx_vand_v(bgra, mask_lalpha);
+    component_r = (__m128i) __lsx_vffint_s_w(component_r);
+    component_r = (__m128i) __lsx_vfmul_s((__m128) component_r, (__m128) alpha_factor);
+    component_r = __lsx_vftintrz_w_s((__m128) component_r);
 
     v2u64 ra = __lsx_vshuf_b(bgra, component_r, ra_index);
     __lsx_vstelm_d(ra, destination, 0, 0);
@@ -138,19 +138,19 @@ ALWAYS_INLINE void PackOneRowOfRGBA8Litt
   v4u32 mask_lalpha = __lsx_vreplgr2vr_w(0x0ff);
   v4f32 mask_falpha = __lsx_vffint_s_w(mask_lalpha);
   for (unsigned i = 0; i < pixels_per_row_trunc; i += 4) {
-    v16u8 bgra = *((__m128i*)(source));
+    __m128i bgra = *((__m128i*)(source));
     //if A !=0, A=0; else A=0xFF
-    v4f32 alpha_factor = __lsx_vseq_b(bgra, mask_zero);
+    __m128i alpha_factor = __lsx_vseq_b(bgra, mask_zero);
     //if A!=0, A=A; else A=0xFF
     alpha_factor = __lsx_vor_v(bgra, alpha_factor);
     alpha_factor = __lsx_vsrli_w(alpha_factor, 24);
-    alpha_factor = __lsx_vffint_s_w(alpha_factor);
-    alpha_factor = __lsx_vfdiv_s(mask_falpha, alpha_factor);
+    alpha_factor = (__m128i) __lsx_vffint_s_w(alpha_factor);
+    alpha_factor = (__m128i) __lsx_vfdiv_s((__m128) mask_falpha, (__m128) alpha_factor);
 
-    v16u8 component_r = __lsx_vand_v(bgra, mask_lalpha);
-    component_r = __lsx_vffint_s_w(component_r);
-    component_r = __lsx_vfmul_s(component_r, alpha_factor);
-    component_r = __lsx_vftintrz_w_s(component_r);
+    __m128i component_r = __lsx_vand_v(bgra, mask_lalpha);
+    component_r = (__m128i) __lsx_vffint_s_w(component_r);
+    component_r = (__m128i) __lsx_vfmul_s((__m128) component_r, (__m128) alpha_factor);
+    component_r = __lsx_vftintrz_w_s((__m128) component_r);
 
     component_r = __lsx_vpickev_b(component_r, component_r);
     component_r = __lsx_vpickev_b(component_r, component_r);
@@ -172,41 +172,41 @@ ALWAYS_INLINE void PackOneRowOfRGBA8Litt
   v4f32 mask_falpha = __lsx_vffint_s_w(mask_lalpha);
   v16u8 rgba_index = {0,1,2,19, 4,5,6,23, 8,9,10,27, 12,13,14,31};
   for (unsigned i = 0; i < pixels_per_row_trunc; i += 4) {
-    v16u8 bgra = *((__m128i*)(source));
+    __m128i bgra = *((__m128i*)(source));
     //if A !=0, A=0; else A=0xFF
-    v4f32 alpha_factor = __lsx_vseq_b(bgra, mask_zero);
+    __m128i alpha_factor = __lsx_vseq_b(bgra, mask_zero);
     //if A!=0, A=A; else A=0xFF
     alpha_factor = __lsx_vor_v(bgra, alpha_factor);
     alpha_factor = __lsx_vsrli_w(alpha_factor, 24);
-    alpha_factor = __lsx_vffint_s_w(alpha_factor);
-    alpha_factor = __lsx_vfdiv_s(mask_falpha, alpha_factor);
+    alpha_factor = (__m128i) __lsx_vffint_s_w(alpha_factor);
+    alpha_factor = (__m128i) __lsx_vfdiv_s((__m128) mask_falpha, (__m128) alpha_factor);
 
     v16u8 bgra_01 = __lsx_vilvl_b(mask_zero, bgra);
     v16u8 bgra_23 = __lsx_vilvh_b(mask_zero, bgra);
-    v16u8 bgra_0 = __lsx_vilvl_b(mask_zero, bgra_01);
-    v16u8 bgra_1 = __lsx_vilvh_b(mask_zero, bgra_01);
-    v16u8 bgra_2 = __lsx_vilvl_b(mask_zero, bgra_23);
-    v16u8 bgra_3 = __lsx_vilvh_b(mask_zero, bgra_23);
-
-    bgra_0 = __lsx_vffint_s_w(bgra_0);
-    bgra_1 = __lsx_vffint_s_w(bgra_1);
-    bgra_2 = __lsx_vffint_s_w(bgra_2);
-    bgra_3 = __lsx_vffint_s_w(bgra_3);
-
-    v4f32 alpha_factor_0 = __lsx_vreplvei_w(alpha_factor, 0);
-    v4f32 alpha_factor_1 = __lsx_vreplvei_w(alpha_factor, 1);
-    v4f32 alpha_factor_2 = __lsx_vreplvei_w(alpha_factor, 2);
-    v4f32 alpha_factor_3 = __lsx_vreplvei_w(alpha_factor, 3);
-
-    bgra_0 = __lsx_vfmul_s(alpha_factor_0, bgra_0);
-    bgra_1 = __lsx_vfmul_s(alpha_factor_1, bgra_1);
-    bgra_2 = __lsx_vfmul_s(alpha_factor_2, bgra_2);
-    bgra_3 = __lsx_vfmul_s(alpha_factor_3, bgra_3);
-
-    bgra_0 = __lsx_vftintrz_w_s(bgra_0);
-    bgra_1 = __lsx_vftintrz_w_s(bgra_1);
-    bgra_2 = __lsx_vftintrz_w_s(bgra_2);
-    bgra_3 = __lsx_vftintrz_w_s(bgra_3);
+    __m128i bgra_0 = __lsx_vilvl_b(mask_zero, bgra_01);
+    __m128i bgra_1 = __lsx_vilvh_b(mask_zero, bgra_01);
+    __m128i bgra_2 = __lsx_vilvl_b(mask_zero, bgra_23);
+    __m128i bgra_3 = __lsx_vilvh_b(mask_zero, bgra_23);
+
+    bgra_0 = (__m128i) __lsx_vffint_s_w(bgra_0);
+    bgra_1 = (__m128i) __lsx_vffint_s_w(bgra_1);
+    bgra_2 = (__m128i) __lsx_vffint_s_w(bgra_2);
+    bgra_3 = (__m128i) __lsx_vffint_s_w(bgra_3);
+
+    __m128i alpha_factor_0 = __lsx_vreplvei_w(alpha_factor, 0);
+    __m128i alpha_factor_1 = __lsx_vreplvei_w(alpha_factor, 1);
+    __m128i alpha_factor_2 = __lsx_vreplvei_w(alpha_factor, 2);
+    __m128i alpha_factor_3 = __lsx_vreplvei_w(alpha_factor, 3);
+
+    bgra_0 = (__m128i) __lsx_vfmul_s((__m128) alpha_factor_0, (__m128) bgra_0);
+    bgra_1 = (__m128i) __lsx_vfmul_s((__m128) alpha_factor_1, (__m128) bgra_1);
+    bgra_2 = (__m128i) __lsx_vfmul_s((__m128) alpha_factor_2, (__m128) bgra_2);
+    bgra_3 = (__m128i) __lsx_vfmul_s((__m128) alpha_factor_3, (__m128) bgra_3);
+
+    bgra_0 = __lsx_vftintrz_w_s((__m128) bgra_0);
+    bgra_1 = __lsx_vftintrz_w_s((__m128) bgra_1);
+    bgra_2 = __lsx_vftintrz_w_s((__m128) bgra_2);
+    bgra_3 = __lsx_vftintrz_w_s((__m128) bgra_3);
 
     bgra_01 = __lsx_vpickev_b(bgra_1, bgra_0);
     bgra_23 = __lsx_vpickev_b(bgra_3, bgra_2);
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/boringssl/src/include/openssl/target.h b/third_party/boringssl/src/include/openssl/target.h
--- a/third_party/boringssl/src/include/openssl/target.h	2000-01-01 00:00:00.000000000 +0800
+++ b/third_party/boringssl/src/include/openssl/target.h	2000-01-01 00:00:00.000000000 +0800
@@ -54,6 +54,8 @@
 #define OPENSSL_32_BIT
 #elif defined(__myriad2__)
 #define OPENSSL_32_BIT
+#elif defined(__loongarch__) && __SIZEOF_POINTER__ == 8
+#define OPENSSL_64_BIT
 #else
 // The list above enumerates the platforms that BoringSSL supports. For these
 // platforms we keep a reasonable bar of not breaking them: automated test
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/devtools-frontend/src/scripts/build/rollup.config.mjs b/third_party/devtools-frontend/src/scripts/build/rollup.config.mjs
--- a/third_party/devtools-frontend/src/scripts/build/rollup.config.mjs	2000-01-01 00:00:00.000000000 +0800
+++ b/third_party/devtools-frontend/src/scripts/build/rollup.config.mjs	2000-01-01 00:00:00.000000000 +0800
@@ -19,7 +19,7 @@ export default commandLineArgs => ({
     sourcemap: Boolean(commandLineArgs.configSourcemaps),
   }],
   plugins: [
-    terser(),
+    // terser(),
     {
       name: 'devtools-plugin',
       resolveId(source, importer) {
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/skia/src/opts/SkOpts_SetTarget.h b/third_party/skia/src/opts/SkOpts_SetTarget.h
--- a/third_party/skia/src/opts/SkOpts_SetTarget.h	2000-01-01 00:00:00.000000000 +0800
+++ b/third_party/skia/src/opts/SkOpts_SetTarget.h	2000-01-01 00:00:00.000000000 +0800
@@ -136,9 +136,10 @@
         #define SK_OPTS_NS lasx
         // The intrinsic from lasxintrin.h is wrapped by the __loongarch_asx macro, so we need to define it.
         #define __loongarch_asx
+        #define __loongarch_sx
 
         #if defined(__clang__)
-          #pragma clang attribute push(__attribute__((target("lasx"))), apply_to=function)
+          #pragma clang attribute push(__attribute__((target("lsx,lasx"))), apply_to=function)
         #endif
 
     #else
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/xnnpack/BUILD.gn b/third_party/xnnpack/BUILD.gn
--- a/third_party/xnnpack/BUILD.gn	2000-01-01 00:00:00.000000000 +0800
+++ b/third_party/xnnpack/BUILD.gn	2000-01-01 00:00:00.000000000 +0800
@@ -1494,6 +1494,16 @@ if (current_cpu == "x64" || current_cpu
     ":xx-pad_arm64_standalone",
     ":xx-transposev_arm64_standalone",
   ]
+} else if (current_cpu == "loong64") {
+  xnnpack_deps = [
+    ":configs_loong64",
+    ":enums_loong64",
+  ]
+
+  xnnpack_standalone_deps = [
+    ":configs_loong64_standalone",
+    ":enums_loong64_standalone",
+  ]
 } else {
   xnnpack_deps = []
   xnnpack_standalone_deps = []
@@ -42035,6 +42045,160 @@ if (current_cpu == "arm64") {
     ]
 
     configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+}
+
+if (current_cpu == "loong64") {
+  source_set("configs_loong64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/configs/argmaxpool-config.c",
+      "src/src/configs/avgpool-config.c",
+      "src/src/configs/binary-elementwise-config.c",
+      "src/src/configs/cmul-config.c",
+      "src/src/configs/conv-hwc2chw-config.c",
+      "src/src/configs/dwconv-config.c",
+      "src/src/configs/dwconv2d-chw-config.c",
+      "src/src/configs/gemm-config.c",
+      "src/src/configs/hardware-config.c",
+      "src/src/configs/ibilinear-chw-config.c",
+      "src/src/configs/ibilinear-config.c",
+      "src/src/configs/lut32norm-config.c",
+      "src/src/configs/maxpool-config.c",
+      "src/src/configs/pack-lh-config.c",
+      "src/src/configs/raddstoreexpminusmax-config.c",
+      "src/src/configs/reduce-config.c",
+      "src/src/configs/spmm-config.c",
+      "src/src/configs/transpose-config.c",
+      "src/src/configs/unary-elementwise-config.c",
+      "src/src/configs/unpool-config.c",
+      "src/src/configs/vmulcaddc-config.c",
+      "src/src/configs/x8-lut-config.c",
+      "src/src/configs/xx-fill-config.c",
+      "src/src/configs/xx-pad-config.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("configs_loong64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/configs/argmaxpool-config.c",
+      "src/src/configs/avgpool-config.c",
+      "src/src/configs/binary-elementwise-config.c",
+      "src/src/configs/cmul-config.c",
+      "src/src/configs/conv-hwc2chw-config.c",
+      "src/src/configs/dwconv-config.c",
+      "src/src/configs/dwconv2d-chw-config.c",
+      "src/src/configs/gemm-config.c",
+      "src/src/configs/hardware-config.c",
+      "src/src/configs/ibilinear-chw-config.c",
+      "src/src/configs/ibilinear-config.c",
+      "src/src/configs/lut32norm-config.c",
+      "src/src/configs/maxpool-config.c",
+      "src/src/configs/pack-lh-config.c",
+      "src/src/configs/raddstoreexpminusmax-config.c",
+      "src/src/configs/reduce-config.c",
+      "src/src/configs/spmm-config.c",
+      "src/src/configs/transpose-config.c",
+      "src/src/configs/unary-elementwise-config.c",
+      "src/src/configs/unpool-config.c",
+      "src/src/configs/vmulcaddc-config.c",
+      "src/src/configs/x8-lut-config.c",
+      "src/src/configs/xx-fill-config.c",
+      "src/src/configs/xx-pad-config.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool:pthreadpool_standalone",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+
+    if (!(is_android && use_order_profiling)) {
+      assert_no_deps = [ "//base" ]
+    }
+  }
+
+  source_set("enums_loong64") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/enums/allocation-type.c",
+      "src/src/enums/datatype-strings.c",
+      "src/src/enums/microkernel-type.c",
+      "src/src/enums/node-type.c",
+      "src/src/enums/operator-type.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
+    configs += [ "//build/config/compiler:no_chromium_code" ]
+    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
+
+    deps = [
+      "//third_party/cpuinfo",
+      "//third_party/fp16",
+      "//third_party/fxdiv",
+      "//third_party/pthreadpool",
+    ]
+
+    public_configs = [ ":xnnpack_config" ]
+  }
+
+  # This is a target that cannot depend on //base.
+  source_set("enums_loong64_standalone") {
+    cflags = []
+
+    sources = [
+      "src/include/xnnpack.h",
+      "src/src/enums/allocation-type.c",
+      "src/src/enums/datatype-strings.c",
+      "src/src/enums/microkernel-type.c",
+      "src/src/enums/node-type.c",
+      "src/src/enums/operator-type.c",
+    ]
+
+    configs -= [ "//build/config/compiler:chromium_code" ]
     configs += [ "//build/config/compiler:no_chromium_code" ]
     configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]
 
Binary files a/third_party/xnnpack/.BUILD.gn.swp and b/third_party/xnnpack/.BUILD.gn.swp differ
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/xnnpack/src/src/xnnpack/common.h b/third_party/xnnpack/src/src/xnnpack/common.h
--- a/third_party/xnnpack/src/src/xnnpack/common.h	2000-01-01 00:00:00.000000000 +0800
+++ b/third_party/xnnpack/src/src/xnnpack/common.h	2000-01-01 00:00:00.000000000 +0800
@@ -79,6 +79,12 @@
 #define XNN_ARCH_WASMRELAXEDSIMD 0
 #endif
 
+#if defined(__loongarch__)
+#define XNN_ARCH_LOONGARCH 1
+#else
+#define XNN_ARCH_LOONGARCH 0
+#endif
+
 // Define platform identification macros
 
 #if defined(__ANDROID__)
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/xnnpack/src/src/xnnpack/hardware-config.h b/third_party/xnnpack/src/src/xnnpack/hardware-config.h
--- a/third_party/xnnpack/src/src/xnnpack/hardware-config.h	2000-01-01 00:00:00.000000000 +0800
+++ b/third_party/xnnpack/src/src/xnnpack/hardware-config.h	2000-01-01 00:00:00.000000000 +0800
@@ -77,6 +77,10 @@ enum xnn_arch_flags {
 #if XNN_ARCH_HEXAGON
   xnn_arch_hvx = 1 << 0,
 #endif  // XNN_ARCH_HEXAGON
+#if XNN_ARCH_LOONGARCH
+  xnn_arch_lsx = 1 << 0,
+  xnn_arch_lasx = 1 << 1,
+#endif  // XNN_ARCH_LOONGARCH
 };
 
 struct xnn_hardware_config {
