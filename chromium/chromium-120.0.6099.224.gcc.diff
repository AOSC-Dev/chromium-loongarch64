diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/blink/common/interest_group/auction_config_mojom_traits.cc b/third_party/blink/common/interest_group/auction_config_mojom_traits.cc
--- a/third_party/blink/common/interest_group/auction_config_mojom_traits.cc	2024-01-17 04:55:44.653848600 +0800
+++ b/third_party/blink/common/interest_group/auction_config_mojom_traits.cc	2024-01-18 23:00:17.869626678 +0800
@@ -2,6 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#pragma GCC visibility push(default)
+
 #include "third_party/blink/public/common/interest_group/auction_config_mojom_traits.h"
 
 #include <string>
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/blink/public/web/web_local_frame_client.h b/third_party/blink/public/web/web_local_frame_client.h
--- a/third_party/blink/public/web/web_local_frame_client.h	2024-01-17 04:55:45.329909600 +0800
+++ b/third_party/blink/public/web/web_local_frame_client.h	2024-01-18 23:00:17.870626696 +0800
@@ -69,6 +69,7 @@
 #include "third_party/blink/public/platform/modules/service_worker/web_service_worker_provider.h"
 #include "third_party/blink/public/platform/resource_load_info_notifier_wrapper.h"
 #include "third_party/blink/public/platform/url_loader_throttle_provider.h"
+#include "third_party/blink/public/platform/web_background_resource_fetch_assets.h"
 #include "third_party/blink/public/platform/web_common.h"
 #include "third_party/blink/public/platform/web_content_security_policy_struct.h"
 #include "third_party/blink/public/platform/web_content_settings_client.h"
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/blink/renderer/bindings/core/v8/native_value_traits_buffer_sources.cc b/third_party/blink/renderer/bindings/core/v8/native_value_traits_buffer_sources.cc
--- a/third_party/blink/renderer/bindings/core/v8/native_value_traits_buffer_sources.cc	2024-01-17 04:55:45.341910600 +0800
+++ b/third_party/blink/renderer/bindings/core/v8/native_value_traits_buffer_sources.cc	2024-01-18 23:00:17.871626714 +0800
@@ -2,6 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#pragma GCC visibility push(default)
+
 #include "third_party/blink/public/common/features.h"
 #include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
 #include "third_party/blink/renderer/core/core_export.h"
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/blink/renderer/core/frame/local_frame.h b/third_party/blink/renderer/core/frame/local_frame.h
--- a/third_party/blink/renderer/core/frame/local_frame.h	2024-01-17 04:55:45.705943300 +0800
+++ b/third_party/blink/renderer/core/frame/local_frame.h	2024-01-18 23:00:17.872626732 +0800
@@ -67,6 +67,7 @@
 #include "third_party/blink/public/mojom/script/script_evaluation_params.mojom-blink-forward.h"
 #include "third_party/blink/public/mojom/use_counter/metrics/web_feature.mojom-blink-forward.h"
 #include "third_party/blink/public/platform/task_type.h"
+#include "third_party/blink/public/platform/web_background_resource_fetch_assets.h"
 #include "third_party/blink/public/platform/web_vector.h"
 #include "third_party/blink/public/web/web_script_execution_callback.h"
 #include "third_party/blink/renderer/core/core_export.h"
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/blink/renderer/core/frame/local_frame_client.h b/third_party/blink/renderer/core/frame/local_frame_client.h
--- a/third_party/blink/renderer/core/frame/local_frame_client.h	2024-01-17 04:55:45.705943300 +0800
+++ b/third_party/blink/renderer/core/frame/local_frame_client.h	2024-01-18 23:00:17.873626750 +0800
@@ -56,6 +56,7 @@
 #include "third_party/blink/public/mojom/portal/portal.mojom-blink-forward.h"
 #include "third_party/blink/public/platform/child_url_loader_factory_bundle.h"
 #include "third_party/blink/public/platform/scheduler/web_scoped_virtual_time_pauser.h"
+#include "third_party/blink/public/platform/web_background_resource_fetch_assets.h"
 #include "third_party/blink/public/platform/web_content_settings_client.h"
 #include "third_party/blink/public/platform/web_effective_connection_type.h"
 #include "third_party/blink/public/platform/web_worker_fetch_context.h"
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/blink/renderer/core/typed_arrays/dom_typed_array.cc b/third_party/blink/renderer/core/typed_arrays/dom_typed_array.cc
--- a/third_party/blink/renderer/core/typed_arrays/dom_typed_array.cc	2024-01-17 04:55:46.221989900 +0800
+++ b/third_party/blink/renderer/core/typed_arrays/dom_typed_array.cc	2024-01-18 23:00:17.874626768 +0800
@@ -2,6 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#pragma GCC visibility push(default)
 #include "third_party/blink/renderer/core/typed_arrays/dom_typed_array.h"
 
 #include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/blink/renderer/core/typed_arrays/dom_typed_array.h b/third_party/blink/renderer/core/typed_arrays/dom_typed_array.h
--- a/third_party/blink/renderer/core/typed_arrays/dom_typed_array.h	2024-01-17 04:55:46.221989900 +0800
+++ b/third_party/blink/renderer/core/typed_arrays/dom_typed_array.h	2024-01-18 23:00:17.874626768 +0800
@@ -12,7 +12,7 @@
 namespace blink {
 
 template <typename T, typename V8TypedArray, bool clamped = false>
-class DOMTypedArray final : public DOMArrayBufferView {
+class CORE_EXPORT DOMTypedArray final : public DOMArrayBufferView {
   typedef DOMTypedArray<T, V8TypedArray, clamped> ThisType;
   DEFINE_WRAPPERTYPEINFO();
   static const WrapperTypeInfo wrapper_type_info_body_;
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/perfetto/include/perfetto/base/status.h b/third_party/perfetto/include/perfetto/base/status.h
--- a/third_party/perfetto/include/perfetto/base/status.h	2024-01-17 04:56:50.055735300 +0800
+++ b/third_party/perfetto/include/perfetto/base/status.h	2024-01-18 23:00:17.907627367 +0800
@@ -109,7 +109,7 @@ inline Status OkStatus() {
   return Status();
 }
 
-PERFETTO_PRINTF_FORMAT(1, 2) Status ErrStatus(const char* format, ...);
+PERFETTO_EXPORT_COMPONENT PERFETTO_PRINTF_FORMAT(1, 2) Status ErrStatus(const char* format, ...);
 
 }  // namespace base
 }  // namespace perfetto
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/protobuf/src/google/protobuf/repeated_ptr_field.h b/third_party/protobuf/src/google/protobuf/repeated_ptr_field.h
--- a/third_party/protobuf/src/google/protobuf/repeated_ptr_field.h	2024-01-17 04:56:04.891670200 +0800
+++ b/third_party/protobuf/src/google/protobuf/repeated_ptr_field.h	2024-01-18 23:00:17.908627385 +0800
@@ -847,7 +847,7 @@ class StringTypeHandler {
 // RepeatedPtrField is like RepeatedField, but used for repeated strings or
 // Messages.
 template <typename Element>
-class RepeatedPtrField final : private internal::RepeatedPtrFieldBase {
+class PROTOBUF_EXPORT RepeatedPtrField final : private internal::RepeatedPtrFieldBase {
 
  public:
   constexpr RepeatedPtrField();
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/ruy/src/ruy/profiler/instrumentation.cc b/third_party/ruy/src/ruy/profiler/instrumentation.cc
--- a/third_party/ruy/src/ruy/profiler/instrumentation.cc	2024-01-17 04:56:24.857467200 +0800
+++ b/third_party/ruy/src/ruy/profiler/instrumentation.cc	2024-01-18 23:00:17.908627385 +0800
@@ -18,6 +18,7 @@ limitations under the License.
 #ifdef RUY_PROFILER
 
 #include <cstring>
+#include <string>
 
 namespace ruy {
 namespace profiler {
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/swiftshader/third_party/llvm-16.0/llvm/lib/Transforms/IPO/AttributorAttributes.cpp b/third_party/swiftshader/third_party/llvm-16.0/llvm/lib/Transforms/IPO/AttributorAttributes.cpp
--- a/third_party/swiftshader/third_party/llvm-16.0/llvm/lib/Transforms/IPO/AttributorAttributes.cpp	2024-01-17 04:57:09.613495600 +0800
+++ b/third_party/swiftshader/third_party/llvm-16.0/llvm/lib/Transforms/IPO/AttributorAttributes.cpp	2024-01-18 23:00:17.947628092 +0800
@@ -3494,7 +3494,7 @@ template <typename BaseTy, typename ToTy
 struct CachedReachabilityAA : public BaseTy {
   using RQITy = ReachabilityQueryInfo<ToTy>;
 
-  CachedReachabilityAA<BaseTy, ToTy>(const IRPosition &IRP, Attributor &A)
+  CachedReachabilityAA(const IRPosition &IRP, Attributor &A)
       : BaseTy(IRP, A) {}
 
   /// See AbstractAttribute::isQueryAA.
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/webrtc/api/stats/rtc_stats.h b/third_party/webrtc/api/stats/rtc_stats.h
--- a/third_party/webrtc/api/stats/rtc_stats.h	2024-01-17 04:56:49.595693800 +0800
+++ b/third_party/webrtc/api/stats/rtc_stats.h	2024-01-18 23:00:17.948628110 +0800
@@ -275,7 +275,7 @@ class RTCStatsMemberInterface {
 // The supported types are the ones described by
 // `RTCStatsMemberInterface::Type`.
 template <typename T>
-class RTCStatsMember : public RTCStatsMemberInterface {
+class RTC_EXPORT RTCStatsMember : public RTCStatsMemberInterface {
  public:
   explicit RTCStatsMember(const char* name)
       : RTCStatsMemberInterface(name), value_() {}
diff '--color=auto' -p -X ../chromium-loongarch64/chromium/exclude -N -u -r a/third_party/webrtc/rtc_base/string_encode.h b/third_party/webrtc/rtc_base/string_encode.h
--- a/third_party/webrtc/rtc_base/string_encode.h	2024-01-17 04:57:00.124641700 +0800
+++ b/third_party/webrtc/rtc_base/string_encode.h	2024-01-18 23:00:17.948628110 +0800
@@ -64,7 +64,7 @@ bool tokenize_first(absl::string_view so
 
 // Convert arbitrary values to/from a string.
 // TODO(jonasolsson): Remove these when absl::StrCat becomes available.
-std::string ToString(bool b);
+RTC_EXPORT std::string ToString(bool b);
 
 std::string ToString(absl::string_view s);
 // The const char* overload is needed for correct overload resolution because of
@@ -73,7 +73,7 @@ std::string ToString(const char* s);
 
 std::string ToString(short s);
 std::string ToString(unsigned short s);
-std::string ToString(int s);
+RTC_EXPORT std::string ToString(int s);
 std::string ToString(unsigned int s);
 std::string ToString(long int s);
 std::string ToString(unsigned long int s);
