diff '--color=auto' -p -X ../chromium-loongarch64/qt6-webengine/exclude -N -u -r a/qtwebengine/src/3rdparty/chromium/v8/src/regexp/loong64/regexp-macro-assembler-loong64.cc b/qtwebengine/src/3rdparty/chromium/v8/src/regexp/loong64/regexp-macro-assembler-loong64.cc
--- a/qtwebengine/src/3rdparty/chromium/v8/src/regexp/loong64/regexp-macro-assembler-loong64.cc	2024-02-10 08:23:21.000000000 +0800
+++ b/qtwebengine/src/3rdparty/chromium/v8/src/regexp/loong64/regexp-macro-assembler-loong64.cc	2024-02-23 22:57:06.667731413 +0800
@@ -717,6 +717,8 @@ Handle<HeapObject> RegExpMacroAssemblerL
 
       ExternalReference stack_limit =
           ExternalReference::address_of_jslimit(masm_->isolate());
+      Operand extra_space_for_variables(num_registers_ * kSystemPointerSize);
+
       __ li(a0, Operand(stack_limit));
       __ Ld_d(a0, MemOperand(a0, 0));
       __ Sub_d(a0, sp, a0);
@@ -724,14 +726,14 @@ Handle<HeapObject> RegExpMacroAssemblerL
       __ Branch(&stack_limit_hit, le, a0, Operand(zero_reg));
       // Check if there is room for the variable number of registers above
       // the stack limit.
-      __ Branch(&stack_ok, hs, a0, Operand(num_registers_ * kPointerSize));
+      __ Branch(&stack_ok, hs, a0, extra_space_for_variables);
       // Exit with OutOfMemory exception. There is not enough space on the stack
       // for our working registers.
       __ li(a0, Operand(EXCEPTION));
       __ jmp(&return_v0);
 
       __ bind(&stack_limit_hit);
-      CallCheckStackGuardState(a0);
+      CallCheckStackGuardState(a0, extra_space_for_variables);
       // If returned value is non-zero, we exit with the returned value as
       // result.
       __ Branch(&return_v0, ne, a0, Operand(zero_reg));
@@ -1131,7 +1133,8 @@ void RegExpMacroAssemblerLOONG64::ClearR
 
 // Private methods:
 
-void RegExpMacroAssemblerLOONG64::CallCheckStackGuardState(Register scratch) {
+void RegExpMacroAssemblerLOONG64::CallCheckStackGuardState(
+    Register scratch, Operand extra_space) {
   DCHECK(!isolate()->IsGeneratingEmbeddedBuiltins());
   DCHECK(!masm_->options().isolate_independent_code);
 
@@ -1144,6 +1147,9 @@ void RegExpMacroAssemblerLOONG64::CallCh
   __ And(sp, sp, Operand(-stack_alignment));
   __ St_d(scratch, MemOperand(sp, 0));
 
+  // Extra space for variables.
+  __ li(a3, extra_space);
+  // RegExp code frame pointer.
   __ mov(a2, frame_pointer());
   // InstructionStream of self.
   __ li(a1, Operand(masm_->CodeObject()), CONSTANT_SIZE);
@@ -1152,16 +1158,6 @@ void RegExpMacroAssemblerLOONG64::CallCh
   DCHECK(IsAligned(stack_alignment, kPointerSize));
   __ Sub_d(sp, sp, Operand(stack_alignment));
 
-  // The stack pointer now points to cell where the return address will be
-  // written. Arguments are in registers, meaning we treat the return address as
-  // argument 5. Since DirectCEntry will handle allocating space for the C
-  // argument slots, we don't need to care about that here. This is how the
-  // stack will look (sp meaning the value of sp at this moment):
-  // [sp + 3] - empty slot if needed for alignment.
-  // [sp + 2] - saved sp.
-  // [sp + 1] - second word reserved for return value.
-  // [sp + 0] - first word reserved for return value.
-
   // a0 will point to the return address, placed by DirectCEntry.
   __ mov(a0, sp);
 
@@ -1175,17 +1171,6 @@ void RegExpMacroAssemblerLOONG64::CallCh
   __ li(kScratchReg, Operand(entry, RelocInfo::OFF_HEAP_TARGET));
   __ Call(kScratchReg);
 
-  // DirectCEntry allocated space for the C argument slots so we have to
-  // drop them with the return address from the stack with loading saved sp.
-  // At this point stack must look:
-  // [sp + 7] - empty slot if needed for alignment.
-  // [sp + 6] - saved sp.
-  // [sp + 5] - second word reserved for return value.
-  // [sp + 4] - first word reserved for return value.
-  // [sp + 3] - C argument slot.
-  // [sp + 2] - C argument slot.
-  // [sp + 1] - C argument slot.
-  // [sp + 0] - C argument slot.
   __ Ld_d(sp, MemOperand(sp, stack_alignment));
 
   __ li(code_pointer(), Operand(masm_->CodeObject()));
@@ -1203,7 +1188,8 @@ static T* frame_entry_address(Address re
 }
 
 int64_t RegExpMacroAssemblerLOONG64::CheckStackGuardState(
-    Address* return_address, Address raw_code, Address re_frame) {
+    Address* return_address, Address raw_code, Address re_frame,
+    uintptr_t extra_space) {
   InstructionStream re_code = InstructionStream::cast(Object(raw_code));
   return NativeRegExpMacroAssembler::CheckStackGuardState(
       frame_entry<Isolate*>(re_frame, kIsolateOffset),
@@ -1213,7 +1199,8 @@ int64_t RegExpMacroAssemblerLOONG64::Che
       return_address, re_code,
       frame_entry_address<Address>(re_frame, kInputStringOffset),
       frame_entry_address<const byte*>(re_frame, kInputStartOffset),
-      frame_entry_address<const byte*>(re_frame, kInputEndOffset));
+      frame_entry_address<const byte*>(re_frame, kInputEndOffset),
+      extra_space);
 }
 
 MemOperand RegExpMacroAssemblerLOONG64::register_location(int register_index) {
diff '--color=auto' -p -X ../chromium-loongarch64/qt6-webengine/exclude -N -u -r a/qtwebengine/src/3rdparty/chromium/v8/src/regexp/loong64/regexp-macro-assembler-loong64.h b/qtwebengine/src/3rdparty/chromium/v8/src/regexp/loong64/regexp-macro-assembler-loong64.h
--- a/qtwebengine/src/3rdparty/chromium/v8/src/regexp/loong64/regexp-macro-assembler-loong64.h	2024-02-10 08:23:21.000000000 +0800
+++ b/qtwebengine/src/3rdparty/chromium/v8/src/regexp/loong64/regexp-macro-assembler-loong64.h	2024-02-23 22:57:19.115831489 +0800
@@ -87,7 +87,7 @@ class V8_EXPORT_PRIVATE RegExpMacroAssem
   // returning.
   // {raw_code} is an Address because this is called via ExternalReference.
   static int64_t CheckStackGuardState(Address* return_address, Address raw_code,
-                                      Address re_frame);
+                                      Address re_frame, uintptr_t extra_space);
 
   void print_regexp_frame_constants();
 
@@ -162,7 +162,8 @@ class V8_EXPORT_PRIVATE RegExpMacroAssem
   void CheckStackLimit();
 
   // Generate a call to CheckStackGuardState.
-  void CallCheckStackGuardState(Register scratch);
+  void CallCheckStackGuardState(Register scratch,
+                                Operand extra_space = Operand(0));
   void CallIsCharacterInRangeArray(const ZoneList<CharacterRange>* ranges);
 
   // The ebp-relative location of a regexp register.
diff '--color=auto' -p -X ../chromium-loongarch64/qt6-webengine/exclude -N -u -r a/qtwebengine/src/3rdparty/chromium/v8/src/regexp/mips64/regexp-macro-assembler-mips64.cc b/qtwebengine/src/3rdparty/chromium/v8/src/regexp/mips64/regexp-macro-assembler-mips64.cc
--- a/qtwebengine/src/3rdparty/chromium/v8/src/regexp/mips64/regexp-macro-assembler-mips64.cc	2024-02-10 08:23:21.000000000 +0800
+++ b/qtwebengine/src/3rdparty/chromium/v8/src/regexp/mips64/regexp-macro-assembler-mips64.cc	2024-02-23 22:58:35.937449052 +0800
@@ -765,6 +765,8 @@ Handle<HeapObject> RegExpMacroAssemblerM
 
       ExternalReference stack_limit =
           ExternalReference::address_of_jslimit(masm_->isolate());
+      Operand extra_space_for_variables(num_registers_ * kPointerSize);
+
       __ li(a0, Operand(stack_limit));
       __ Ld(a0, MemOperand(a0));
       __ Dsubu(a0, sp, a0);
@@ -772,14 +774,14 @@ Handle<HeapObject> RegExpMacroAssemblerM
       __ Branch(&stack_limit_hit, le, a0, Operand(zero_reg));
       // Check if there is room for the variable number of registers above
       // the stack limit.
-      __ Branch(&stack_ok, hs, a0, Operand(num_registers_ * kPointerSize));
+      __ Branch(&stack_ok, hs, a0, extra_space_for_variables);
       // Exit with OutOfMemory exception. There is not enough space on the stack
       // for our working registers.
       __ li(v0, Operand(EXCEPTION));
       __ jmp(&return_v0);
 
       __ bind(&stack_limit_hit);
-      CallCheckStackGuardState(a0);
+      CallCheckStackGuardState(a0, extra_space_for_variables);
       // If returned value is non-zero, we exit with the returned value as
       // result.
       __ Branch(&return_v0, ne, v0, Operand(zero_reg));
@@ -1182,7 +1184,8 @@ bool RegExpMacroAssemblerMIPS::CanReadUn
 
 // Private methods:
 
-void RegExpMacroAssemblerMIPS::CallCheckStackGuardState(Register scratch) {
+void RegExpMacroAssemblerMIPS::CallCheckStackGuardState(Register scratch,
+                                                        Operand extra_space) {
   DCHECK(!isolate()->IsGeneratingEmbeddedBuiltins());
   DCHECK(!masm_->options().isolate_independent_code);
 
@@ -1195,6 +1198,9 @@ void RegExpMacroAssemblerMIPS::CallCheck
   __ And(sp, sp, Operand(-stack_alignment));
   __ Sd(scratch, MemOperand(sp));
 
+  // Extra space for variables to consider in stack check.
+  __ li(a3, extra_space);
+  // RegExp code frame pointer.
   __ mov(a2, frame_pointer());
   // InstructionStream of self.
   __ li(a1, Operand(masm_->CodeObject()), CONSTANT_SIZE);
@@ -1203,16 +1209,6 @@ void RegExpMacroAssemblerMIPS::CallCheck
   DCHECK(IsAligned(stack_alignment, kPointerSize));
   __ Dsubu(sp, sp, Operand(stack_alignment));
 
-  // The stack pointer now points to cell where the return address will be
-  // written. Arguments are in registers, meaning we treat the return address as
-  // argument 5. Since DirectCEntry will handle allocating space for the C
-  // argument slots, we don't need to care about that here. This is how the
-  // stack will look (sp meaning the value of sp at this moment):
-  // [sp + 3] - empty slot if needed for alignment.
-  // [sp + 2] - saved sp.
-  // [sp + 1] - second word reserved for return value.
-  // [sp + 0] - first word reserved for return value.
-
   // a0 will point to the return address, placed by DirectCEntry.
   __ mov(a0, sp);
 
@@ -1226,17 +1222,6 @@ void RegExpMacroAssemblerMIPS::CallCheck
   __ li(kScratchReg, Operand(entry, RelocInfo::OFF_HEAP_TARGET));
   __ Call(kScratchReg);
 
-  // DirectCEntry allocated space for the C argument slots so we have to
-  // drop them with the return address from the stack with loading saved sp.
-  // At this point stack must look:
-  // [sp + 7] - empty slot if needed for alignment.
-  // [sp + 6] - saved sp.
-  // [sp + 5] - second word reserved for return value.
-  // [sp + 4] - first word reserved for return value.
-  // [sp + 3] - C argument slot.
-  // [sp + 2] - C argument slot.
-  // [sp + 1] - C argument slot.
-  // [sp + 0] - C argument slot.
   __ Ld(sp, MemOperand(sp, stack_alignment + kCArgsSlotsSize));
 
   __ li(code_pointer(), Operand(masm_->CodeObject()));
@@ -1255,7 +1240,8 @@ static T* frame_entry_address(Address re
 
 int64_t RegExpMacroAssemblerMIPS::CheckStackGuardState(Address* return_address,
                                                        Address raw_code,
-                                                       Address re_frame) {
+                                                       Address re_frame,
+						       uintptr_t extra_space) {
   InstructionStream re_code = InstructionStream::cast(Object(raw_code));
   return NativeRegExpMacroAssembler::CheckStackGuardState(
       frame_entry<Isolate*>(re_frame, kIsolateOffset),
@@ -1265,7 +1251,8 @@ int64_t RegExpMacroAssemblerMIPS::CheckS
       return_address, re_code,
       frame_entry_address<Address>(re_frame, kInputStringOffset),
       frame_entry_address<const byte*>(re_frame, kInputStartOffset),
-      frame_entry_address<const byte*>(re_frame, kInputEndOffset));
+      frame_entry_address<const byte*>(re_frame, kInputEndOffset),
+      extra_space);
 }
 
 MemOperand RegExpMacroAssemblerMIPS::register_location(int register_index) {
diff '--color=auto' -p -X ../chromium-loongarch64/qt6-webengine/exclude -N -u -r a/qtwebengine/src/3rdparty/chromium/v8/src/regexp/mips64/regexp-macro-assembler-mips64.h b/qtwebengine/src/3rdparty/chromium/v8/src/regexp/mips64/regexp-macro-assembler-mips64.h
--- a/qtwebengine/src/3rdparty/chromium/v8/src/regexp/mips64/regexp-macro-assembler-mips64.h	2024-02-10 08:23:21.000000000 +0800
+++ b/qtwebengine/src/3rdparty/chromium/v8/src/regexp/mips64/regexp-macro-assembler-mips64.h	2024-02-23 22:54:29.327466274 +0800
@@ -88,7 +88,7 @@ class V8_EXPORT_PRIVATE RegExpMacroAssem
   // returning.
   // {raw_code} is an Address because this is called via ExternalReference.
   static int64_t CheckStackGuardState(Address* return_address, Address raw_code,
-                                      Address re_frame);
+                                      Address re_frame, uintptr_t extra_space);
 
   void print_regexp_frame_constants();
 
@@ -163,7 +163,8 @@ class V8_EXPORT_PRIVATE RegExpMacroAssem
 
 
   // Generate a call to CheckStackGuardState.
-  void CallCheckStackGuardState(Register scratch);
+  void CallCheckStackGuardState(Register scratch,
+                                Operand extra_space = Operand(0));
   void CallIsCharacterInRangeArray(const ZoneList<CharacterRange>* ranges);
 
   // The ebp-relative location of a regexp register.
